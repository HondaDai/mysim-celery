#!/usr/bin/env python

import sys
import os
import re
import subprocess
from pprint import pprint
import signal
import time
import platform
import socket

if socket.gethostname() == 'HsM.local':
  ns_path = "/Volumes/Transcend/ns-allinone-3.23/ns-3.23"
else:
  ns_path = os.getenv("HOME")+"/ns-allinone-3.23/ns-3.23"

print ns_path
os.chdir(ns_path)

argc = len(sys.argv)

def say(msg):
  if platform.system() == 'Darwin':
    # os.system("say -v Mei-Jia %s" % (msg))
    os.system("say %s" % (msg))

def alert(msg):
  if platform.system() == 'Darwin':
    os.system("osascript -e 'tell app \"System Events\" to display dialog \"%s\"' >/dev/null 2>&1" % (msg) )

def build_mysim(mysim_param):
  mapper = lambda x: "./waf --run \"scratch/mysim/mysim %s\"" % (x)
  return map (mapper, mysim_param)

def build_mysim_param(origin_cross, times=1, from_idx=0):
  result = []
  for i in xrange(0, times):
    i = i + from_idx
    for oc in origin_cross:
      result.append(" --RngRun=%d --resultPrefix=MYSIM-%d-%s %s" % (i, i, oc, origin_cross[oc]) )
  return result

def cross(origin, keys):
  result = {}
  if origin == {}:
    return keys

  for o in origin:
    for k in keys:
      result.update({"-".join([o,k]) : " ".join([origin[o], keys[k]])})
  return result


def ip():
  return socket.gethostbyname_ex(socket.gethostname())[-1][-1]

def default(l, idx, def_v):
  return l[idx] if len(l) > idx else def_v

def wait_process():
  while (True):
    completed = []
    l = len(pros)
    for i in xrange(l):
      if pros[i].poll() is not None:
        completed.append(i)

    for i in xrange(len(completed)-1, -1, -1):
      # pros[completed[i]].terminate()
      print(completed[i])
      del pros[completed[i]]

    if l == len(completed):
      break
    else:
      print("%d of %d is completed" % (len(completed), len(pros)))
      time.sleep(10)


attr = [
  # {"pro":"--enableProxy=true", "srv":"--enableProxy=false"},
  # {"pro":"--enableProxy=true"},
  {"srv":"--enableProxy=false"},

  # {"1c":"--clientSize=1", "5c":"--clientSize=5"},
  # {"5c":"--clientSize=5", "10c":"--clientSize=10", "15c":"--clientSize=15"},
  # {"5c":"--clientSize=5"},
  # {"30c":"--clientSize=30"},
  {"500c":"--clientSize=500"},
  # {"100c":"--clientSize=100", 
  #  "200c":"--clientSize=200", 
  #  "300c":"--clientSize=300", 
  #  "400c":"--clientSize=400", 
  #  "500c":"--clientSize=500",} ,

  {"0er":"--errorRate=0", "0.01er":"--errorRate=0.01"},
  # {"0.01er":"--errorRate=0.01"},
  # {"0er":"--errorRate=0"},

  {"0d":"--proxyServerDelay=0ms", "100d":"--proxyServerDelay=100ms"},
  # {"100d":"--proxyServerDelay=100ms"},
  # {"0d":"--proxyServerDelay=0ms"},

  # {"10f":"--fileSize=10"},
  {"2f":"--fileSize=2"},

  {"8l":"--lambdaReciprocal=8"},
  # {"0l":"--lambdaReciprocal=0"},

  {"4000st":"--stopTime=4000"},

  {"110ccs": "--crowdClientSize=110"},
  {"400cft": "--crowdFromTime=400"},
  {"600ctt": "--crowdToTime=600"},
  {"4cl": "--crowdLambdaReciprocal=4"}
]
from_idx = 0 # default is 0


if argc == 1:
  print("You should pass 1+ arguments.")



params = reduce(cross, attr, {})

if sys.argv[1] == "help":
  ntimes = int(default(sys.argv, 2, 1))
else:
  ntimes = int(sys.argv[1])

_dests = list(set([p.split('-')[0] for p in params]))
_params = list(set(['-'.join(p.split('-')[1:]) for p in params]))
_seeds = [str(i) for i in range(from_idx, from_idx+ntimes)]



db_conf_path = "%s/godb.conf" % (ns_path)
db_conf = {k.strip(): v.strip() for k, v in [kv.split("=") for kv in open(db_conf_path).read().strip().split("\n")] }

# init go db
argv = [
  "-action", "init",
  "-schema", db_conf['schema_name'],
  "-params", ",".join(_params),
  "-dests", ",".join(_dests),
  "-seeds", ",".join(_seeds),
]

os.system(db_conf['program_path']+"/"+db_conf['program_name']+" "+" ".join(argv))





from celery.task.control import discard_all
from celery import group

discard_all()

import tasks


jobs = []
for i in xrange(0, ntimes):
  i = i + from_idx
  mysim_param = build_mysim_param(params, 1, i)
  jobs += [ group( tasks.run_simulation.s(job) for job in mysim_param ).delay() ]
  pprint(["./waf --run \"scratch/mysim/mysim %s\"" % (x) for x in mysim_param])


# mysim_param = build_mysim_param(params, ntimes, from_idx)
# pprint(["./waf --run \"scratch/mysim/mysim %s\"" % (x) for x in mysim_param])
# jobs = [ tasks.run_simulation.delay(job) for job in mysim_param]

pprint(jobs)

# jobs = [jobs[0]]

# while True:
#   results = [job.result for job in jobs]
#   pprint(results)

#   if all(r != None for r in results):
#     break
#   else:
#     time.sleep(10)
    





